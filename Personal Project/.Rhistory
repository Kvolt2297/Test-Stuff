while(i == 1) {
storage.stress.n <- a.storage[start.stop[1]:start.stop[2], 2:5]
break
}
# Stress Disparaging
while(i == 2){
storage.stress.d <- a.storage[start.stop[1]:start.stop[2], 1:5]
break
}
# No stress Neutral.
while(i == 3){
storage.free.n <- a.storage[start.stop[1]:start.stop[2], c(1:5)]
break
}
# No stress Disparaging.
while(i == 4){
storage.free.d <- a.storage[start.stop[1]:start.stop[2], c(5:5)]
break
}
}
View(storage.free.n)
View(storage.stress.n)
#
#Calculating ANOVA for each group manually-----------------------------------
#
#Anova for Stress Neutral
anova.stress.n<-stack(storage.stress.n) #Stacking Values
View(anova.stress.n)
anova.result.sn <- aov(stress.type~humor.type + start + middle + finish, data = storage.stress.n)
View(storage.stress.n)
for(i in 1:4){
#enter for loop
start.stop <- c( ((i-1) * n.participants + 1), i * n.participants)
# Stress Neutral
while(i == 1) {
storage.stress.n <- a.storage[start.stop[1]:start.stop[2], 1:5]
break
}
# Stress Disparaging
while(i == 2){
storage.stress.d <- a.storage[start.stop[1]:start.stop[2], 1:5]
break
}
# No stress Neutral.
while(i == 3){
storage.free.n <- a.storage[start.stop[1]:start.stop[2], c(1:5)]
break
}
# No stress Disparaging.
while(i == 4){
storage.free.d <- a.storage[start.stop[1]:start.stop[2], c(5:5)]
break
}
}
anova.result.sn <- aov(stress.type~humor.type + start + middle + finish, data = storage.stress.n)
anova.result.sn <- aov(stress.type~humor.type + start:finish, data = storage.stress.n)
anova.result.sn <- aov(start:finish~stress.type+humor.type, data = storage.stress.n)
summary(anova.result.sn)
anova.result.sn <- aov(start~stress.type+humor.type+stress.type:humor.type, data = storage.stress.n)
anova.result.sn <- aov(start~stress.type+humor.type+stress.type:humor.type, data = storage.stress.n)
anova.result.sn <- aov(start~stress.type*humor.type+stress.type:humor.type,
data = storage.stress.n)
anova.result.sn <- aov(c(start,middle,finish)~stress.type*humor.type,
data = storage.stress.n)
anova.result.sn <- aov(c(start~stress.type*humor.type,
summary(anova.result.sn)
anova.result.sn <- aov(c(start~stress.type*humor.type,
data = storage.stress.n))
anova.result.sn <- aov(c(start~stress.type*humor.type,
data = storage.stress.n))
anova.result.sn <- aov(c(start~stress.type*humor.type,
data = a.storage)
anova.result.sn <- aov(c(start~stress.type*humor.type,
data = a.storage))
anova.result.sn <- aov(c(start~stress.type*humor.type,
data = a.storage))
anova.result.sn <- aov(start~stress.type*humor.type,
data = a.storage)
View(anova.result.sn)
summary(anova.result.sn)
anova.result.sn <- aov(start:finish~stress.type*humor.type,
data = a.storage)
anova.result.sn <- aov(start,middle,finish~stress.type*humor.type,
data = a.storage)
anova.result.sn <- aov(start~middle~finish~stress.type*humor.type,
data = a.storage)
anova.result.sn <- aov(start, finish~stress.type*humor.type,
data = a.storage)
anova2.start <- aov(start~stress.type*humor.type,
data = a.storage)
summary(anova2.start)
anova2.start <- aov(stress.type~humor.type+start+middle+finish,
data = a.storage)
anova2.start <- aov(stress.type~humor.type*start+middle+finish,
data = a.storage)
summary(anova2.start)
anova2.start <- aov(stress.type~humor.type*start,
data = a.storage)
anova2.start <- aov(stress.type~humor.type*start,
data = a.storage)
anova2.start <- aov(start~stress.type+humor.type,
data = a.storage)
summary(anova2.start)
anova2.start <- aov(start~stress.type*humor.type,
data = a.storage)
summary(anova2.start)
anova2.middle <- aov(middle~stress.type*humor.type,
data = a.storage)
summary(anova2.start)
summary(anova2.middle)
anova2.finish <- aov(finish~stress.type*humor.type,
data = a.storage)
summary(anova2.middle)
#
#Optimising ANOVA process----------------------------------------------------
#
#EDIT: For some reason, after re-testing it gives me a list of 1, instead of 13
#EDIT 2: I manage to fix it, by removing summary() from the function. Don't
#know why it works like that
#
anova.results <- function(explanatory.var) {
x <-aov(explanatory.var~stress.type*humor.type,
data = a.storage) #Running anova analysis
}
#
#Optimising ANOVA process----------------------------------------------------
#
#EDIT: For some reason, after re-testing it gives me a list of 1, instead of 13
#EDIT 2: I manage to fix it, by removing summary() from the function. Don't
#know why it works like that
#
two-way.anova.results <- function(explanatory.var) {
x <-aov(explanatory.var~stress.type*humor.type,
data = a.storage) #Running anova analysis
}
#
#Optimising ANOVA process----------------------------------------------------
#
#EDIT: For some reason, after re-testing it gives me a list of 1, instead of 13
#EDIT 2: I manage to fix it, by removing summary() from the function. Don't
#know why it works like that
#
anova2.results <- function(explanatory.var) {
x <-aov(explanatory.var~stress.type*humor.type,
data = a.storage) #Running anova analysis
}
#Check if it matches with the manual input.
#Stress Neutral Group
anova.result.sn <- anova2.results(start)
summary(anova.result.sn)
#Check if it matches with the manual input.
#Stress Neutral Group
anova.result.sn <- anova2.results(start)
anova.result.sn <- anova2.results(start)
summary(anova.result.sn)
#Assigning the anova values for the rest of the groups
#Stress Disparaging
anova.result.sd <- anova2.results(middle)
#
#Optimising ANOVA process----------------------------------------------------
#
#EDIT: For some reason, after re-testing it gives me a list of 1, instead of 13
#EDIT 2: I manage to fix it, by removing summary() from the function. Don't
#know why it works like that
#
anova2.results <- function(x) {
x <-aov(x~stress.type*humor.type,
data = a.storage) #Running anova analysis
}
#Check if it matches with the manual input.
#Stress Neutral Group
anova.result.sn <- anova2.results(start)
#Assigning the anova values for the rest of the groups
#Stress Disparaging
anova.result.sd <- anova2.results(middle)
anova2.finish <- aov(finish~stress.type+humor.type,
data = a.storage)
summary(anova2.finish)
anova2.finish <- aov(finish~stress.type*humor.type,
data = a.storage)
summary(anova2.finish)
#Method Two [preffered]-------------------------
summary(anova2.start)[[1]][["Pr(>F)"]] # Also seems to extract Pr(>F) values
#Extracts F-Values-----------------------------------------------------------
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values <-data.frame(c(names.groups), na.omit(round(c(
summary(anova2.start[[1]][["F value"]], 2)))))
#Extracts F-Values-----------------------------------------------------------
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values <-data.frame(c(names.groups), na.omit(round(
summary(anova2.start[[1]][["F value"]], 2))))
F.Values <-data.frame(c(names.groups), na.omit(round(
summary(anova2.start[[1:3]][["F value"]], 2))))
#Extracts F-Values-----------------------------------------------------------
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values <-data.frame(c(names.groups), na.omit(round(
summary(anova2.start[[1:2]][["F value"]], 2))))
#Extracts F-Values-----------------------------------------------------------
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values <-data.frame(c(names.groups), na.omit(round(
summary(anova2.start[[1]][["F value"]], 2))))
#Method Two [preffered]-------------------------
summary(anova2.start)[[1]][["Pr(>F)"]] # Also seems to extract Pr(>F) values
#Extracts F-Values-----------------------------------------------------------
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values <-data.frame(c(names.groups), na.omit(round(
summary(anova2.start)[[1]][["F value"]], 2)))
summary(anova2.start)[[1]][["F value"]]
data.frame(summary(anova2.start)[[1]][["F value"]])
F.Values<-data.frame(summary(anova2.start)[[1]][["F value"]])
View(F.Values)
anova.names <- c("Stress Type", "Humor Type", "Stress & Humor Type")
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values <-data.frame(c(anova.names), na.omit(round(
summary(anova2.start)[[1]][["F value"]], 2)))
View(F.Values)
F.Values <-data.frame(c(anova.names), na.omit(round(
summary(anova2.middle)[[1]][["F value"]], 2)))
F.Values.s <-data.frame(c(anova.names), na.omit(round(
summary(anova2.start)[[1]][["F value"]], 2)))
F.Values.m <-data.frame(c(anova.names), na.omit(round(
summary(anova2.middle)[[1]][["F value"]], 2)))
F.Values.f <-data.frame(c(anova.names), na.omit(round(
summary(anova2.finish)[[1]][["F value"]], 2)))
View(F.Values.f)
#Renaming the Columns for easier use in future
colnames(F.Values) <- c("Group","F-Values")
#Renaming the Columns for easier use in future
colnames(c(F.Values.s, F.Values.m, F.Values.f) <- c("Group","F-Values")
#Renaming the Columns for easier use in future
colnames(c(F.Values.s, F.Values.m, F.Values.f)) <- c("Group","F-Values")
View(F.Values)
View(F.Values.f)
#Creating a F.Values data-frame. Taking off any NA and rounding values by 2s.f.
F.Values.s <-data.frame(c(anova.names), colnames(c("Group","F-Values")), na.omit(round(
summary(anova2.start)[[1]][["F value"]], 2)))
#Renaming the Columns for easier use in future
colnames(F.Values.s) <- c("Group","F-Values")
colnames(F.Values.s) <- c("Group","F-Values")
colnames(F.Values.m) <- c("Group","F-Values")
colnames(F.Values.f) <- c("Group","F-Values")
View(F.Values.s)
#Doing the same for significance values, without rounding
Sig.Values <-data.frame(c(anova.names),c(
summary(anova2.start)[[1]][["Pr(>F)"]],
summary(anova2.middle)[[1]][["Pr(>F)"]],
summary(anova2.finish)[[1]][["Pr(>F)"]])))
#Doing the same for significance values, without rounding
Sig.Values <-data.frame(c(anova.names),c(
summary(anova2.start)[[1]][["Pr(>F)"]],
summary(anova2.middle)[[1]][["Pr(>F)"]],
summary(anova2.finish)[[1]][["Pr(>F)"]]))
View(Sig.Values)
Sig.Values.s <-data.frame(c(anova.names),
summary(anova2.start)[[1]][["Pr(>F)"]])
summary(anova2.start)[[1]][["Pr(>F)"]], 2)))
#Doing the same for significance values, without rounding
Sig.Values.s <-data.frame(c(anova.names), na.omit(round(
summary(anova2.start)[[1]][["Pr(>F)"]], 2)))
View(Sig.Values.s)
Sig.Values.m <-data.frame(c(anova.names), na.omit(round(
summary(anova2.middle)[[1]][["Pr(>F)"]], 3)))
View(Sig.Values.s)
View(Sig.Values.s)
#Doing the same for significance values, without rounding
Sig.Values.s <-data.frame(c(anova.names), na.omit(round(
summary(anova2.start)[[1]][["Pr(>F)"]], 3)))
Sig.Values.f <-data.frame(c(anova.names), na.omit(round(
summary(anova2.finish)[[1]][["Pr(>F)"]], 3)))
View(Sig.Values.f)
Sig.Values.f <-data.frame(c(anova.names), na.omit(
summary(anova2.finish)[[1]][["Pr(>F)"]]))
Sig.Values.m <-data.frame(c(anova.names), na.omit(round(
summary(anova2.middle)[[1]][["Pr(>F)"]], 3)))
View(Sig.Values.m)
Sig.Values.s <-data.frame(c(anova.names), na.omit(
summary(anova2.start)[[1]][["Pr(>F)"]]))
Sig.Values.m <-data.frame(c(anova.names), na.omit(
summary(anova2.middle)[[1]][["Pr(>F)"]]))
Sig.Values.f <-data.frame(c(anova.names), na.omit(
summary(anova2.finish)[[1]][["Pr(>F)"]]))
colnames(Sig.Values.s) <- c("Group","Pr(>F)")
colnames(Sig.Values.m) <- c("Group","Pr(>F)")
colnames(Sig.Values.f) <- c("Group","Pr(>F)")
final.table$`Mean After TSST`[is.na
(final.table$`Mean After TSST`)] <-
m.descr.table$Mean[m.descr.table$Group %in% final.table$Group]
View(m.descr.table)
final.table$`Mean After TSST`[is.na
(final.table$`Mean After TSST`)] <-
m.descr.table$Mean[m.descr.table$Group %in% final.table$Group]
final.table$`Mean Before Experiment`[is.na #if there is an NA in those
#rows/columns
(final.table$`Mean Before Experiment`)] <-
s.descr.table$Mean[s.descr.table$Group %in% final.table$Group]
#Means from the Third Phase
final.table$`Mean After Jokes`[is.na
(final.table$`Mean After Jokes`)] <-
f.descr.table$Mean[f.descr.table$Group %in% final.table$Group]
View(final.table)
final.table <- cbind.data.frame(Group = rep(names.groups, 1),
"Mean Before Experiment" = rep(NA, 4),
"Mean After TSST" = rep(NA, 4),
"Mean After Jokes" = rep(NA, 4))
final.table$`Mean Before Experiment`[is.na #if there is an NA in those
#rows/columns
(final.table$`Mean Before Experiment`)] <-
s.descr.table$Mean[s.descr.table$Group %in% final.table$Group]
#Replace them with the data from that columns, from all of these
#rows that match with the rows of the other data.frame.
#Means from the Second Phase (ONLY TWO GROUPS)
final.table$`Mean After TSST`[is.na
(final.table$`Mean After TSST`)] <-
m.descr.table$Mean[m.descr.table$Group %in% final.table$Group]
#Means from the Third Phase
final.table$`Mean After Jokes`[is.na
(final.table$`Mean After Jokes`)] <-
f.descr.table$Mean[f.descr.table$Group %in% final.table$Group]
View(anova.stress.d)
View(anova.result.sn)
View(anova.free.d)
View(F.Values)
View(F.Values.s)
anova.final.table <- cbind.data.frame(Group = rep(anova.names, 1),
"F-Value Before Experiment" = rep(NA, 4),
"F-Value  After TSST" = rep(NA, 4),
"F-Value  After Jokes" = rep(NA, 4))
anova.final.table <- cbind.data.frame(Group = rep(anova.names, 1),
F.Value.Start= rep(NA, 4),
F.Value.Middle = rep(NA, 4),
F.Value.Finish = rep(NA, 4))
#Table for the ANOVA Results
anova.final.table <- cbind.data.frame(Group = rep(anova.names, 1),
F.Value.Start= rep(NA, 4),
F.Value.Middle = rep(NA, 4),
)
#Table for the ANOVA Results
anova.final.table <- cbind.data.frame(Group = rep(anova.names, 1),
F.Value.Start= rep(NA, 4),
F.Value.Middle = rep(NA, 4),
F.Value.Finish = rep(NA, 4))
#Table for the ANOVA Results
anova.final.table <- cbind.data.frame(Group = rep(anova.names, 1),
F.Value.Start= rep(NA, 3),
F.Value.Middle = rep(NA, 3),
F.Value.Finish = rep(NA, 3))
View(anova.final.table)
(anova.final.table$F.Value.Start)] <-
F.Values.s[F.Values.s$Group %in% anova.final.table$Group]
View(F.Values.s)
colnames(F.Values.s) <- c("Group","F-Value.Start")
colnames(F.Values.m) <- c("Group","F-Value.Middle")
colnames(F.Values.f) <- c("Group","F-Value.Finish")
write.table(final.table,
file = paste(working.dir, "tables/Difference in Means.csv",
sep = "/"), row.names=FALSE, sep = ",")
write.table(final.table,
file = paste(working.dir, "tables/Difference in Means.csv",
sep = "/"), row.names=FALSE, sep = ",")
anova.final.table$F.Value.Start[is.na
(anova.final.table$F.Value.Start)] <-
F.Values.s[F.Values.s$Group %in% anova.final.table$Group]
(anova.final.table$F.Value.Start)] <-
F.Values.s$`F-Value.Start`[F.Values.s$Group %in% anova.final.table$Group]
anova.final.table$F.Value.Start[is.na
(anova.final.table$F.Value.Start)] <-
F.Values.s$`F-Value.Start`[F.Values.s$Group %in% anova.final.table$Group]
View(anova.final.table)
(anova.final.table$F.Value.Middle)] <-
F.Values.s$`F-Value.Middle`[F.Values.s$Group %in% anova.final.table$Group]
(anova.final.table$F.Value.Middle)] <-
F.Values.m$`F-Value.Middle`[F.Values.m$Group %in% anova.final.table$Group]
anova.final.table$F.Value.Middle[is.na
(anova.final.table$F.Value.Middle)] <-
F.Values.m$`F-Value.Middle`[F.Values.m$Group %in% anova.final.table$Group]
anova.final.table$F.Value.Finish[is.na
(anova.final.table$F.Value.Finish)] <-
F.Values.f$`F-Value.Finish`[F.Values.f$Group %in% anova.final.table$Group]
anova.final.table <- cbind.data.frame(Group = rep(anova.names, 1),
"Pr(>F).Start"  = rep(NA, 3),
"Pr(>F).Middle" = rep(NA, 3),
"Pr(>F).Finish" = rep(NA, 3))
anova.pr.table <- cbind.data.frame(Group = rep(anova.names, 1),
"Pr(>F).Start"  = rep(NA, 3),
"Pr(>F).Middle" = rep(NA, 3),
"Pr(>F).Finish" = rep(NA, 3))
colnames(Sig.Values.s) <- c("Group","Pr(>F).Start")
colnames(Sig.Values.m) <- c("Group","Pr(>F).Middle")
colnames(Sig.Values.f) <- c("Group","Pr(>F).Finish")
anova.sg.table <- cbind.data.frame(Group = rep(anova.names, 1),
"Pr(>F).Start"  = rep(NA, 3),
"Pr(>F).Middle" = rep(NA, 3),
"Pr(>F).Finish" = rep(NA, 3))
anova.pr.table$`Pr(>F).Start`[is.na
(anova.pr.table$`Pr(>F).Start`)] <-
Sig.Values.s$`Pr(>F).Start`[Sig.Values.s$Group %in% anova.pr.table$Group]
anova.pr.table$`Pr(>F).Middle`[is.na
(anova.pr.table$`Pr(>F).Middle`)] <-
Sig.Values.m$`Pr(>F).Middle`[Sig.Values.m$Group %in% anova.pr.table$Group]
View(anova.pr.table)
anova.sg.table$`Pr(>F).Finish`[is.na
(anova.sg.table$`Pr(>F).Finish`)] <-
Sig.Values.f$`Pr(>F).Finish`[Sig.Values.f$Group %in% anova.sg.table$Group]
View(anova.sg.table)
#F,Value Start
anova.sg.table$`Pr(>F).Start`[is.na
(anova.sg.table$`Pr(>F).Start`)] <-
Sig.Values.s$`Pr(>F).Start`[Sig.Values.s$Group %in% anova.sg.table$Group]
#F,Value Middle
anova.sg.table$`Pr(>F).Middle`[is.na
(anova.sg.table$`Pr(>F).Middle`)] <-
Sig.Values.m$`Pr(>F).Middle`[Sig.Values.m$Group %in% anova.sg.table$Group]
#F,Value Start
anova.sg.table$`Pr(>F).Finish`[is.na
(anova.sg.table$`Pr(>F).Finish`)] <-
Sig.Values.f$`Pr(>F).Finish`[Sig.Values.f$Group %in% anova.sg.table$Group]
anova.f.table <- cbind.data.frame(Group = rep(anova.names, 1),
F.Value.Start= rep(NA, 3),
F.Value.Middle = rep(NA, 3),
F.Value.Finish = rep(NA, 3))
#F,Value Start
anova.f.table$F.Value.Start[is.na
(anova.f.table$F.Value.Start)] <-
F.Values.s$`F-Value.Start`[F.Values.s$Group %in% anova.f.table$Group]
#F,Value Middle
anova.f.table$F.Value.Middle[is.na
(anova.f.table$F.Value.Middle)] <-
F.Values.m$`F-Value.Middle`[F.Values.m$Group %in% anova.f.table$Group]
#F,Value Start
anova.f.table$F.Value.Finish[is.na
(anova.f.table$F.Value.Finish)] <-
F.Values.f$`F-Value.Finish`[F.Values.f$Group %in% anova.f.table$Group]
View(anova.f.table)
write.table(anova.f.table,
file = paste(working.dir, "tables/F Values.csv",
sep = "/"), row.names=FALSE, sep = ",")
#Exporting difference in Means
write.table(final.table,
file = paste(working.dir, "tables/Difference in Means.csv",
sep = "/"), row.names=FALSE, sep = ",")
#Exporting F-Vakues
write.table(anova.f.table,
file = paste(working.dir, "tables/F Values.csv",
sep = "/"), row.names=FALSE, sep = ",")
#Exporing Pr(>F)
write.table(anova.sg.table,
file = paste(working.dir, "tables/Significance.csv",
sep = "/"), row.names=FALSE, sep = ",")
Main File
#
#Volodko Kirill
#
#
# R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
# Copyright (C) 2019 The R Foundation for Statistical Computing
# Platform: x86_64-w64-mingw32/x64 (64-bit)
#
# R is free software and comes with ABSOLUTELY NO WARRANTY.
# You are welcome to redistribute it under certain conditions.
# Type 'license()' or 'licence()' for distribution details.
#
# Natural language support but running in an English locale
#
# R is a collaborative project with many contributors.
# Type 'contributors()' for more information and
# 'citation()' on how to cite R or R packages in publications.
#
# Type 'demo()' for some demos, 'help()' for on-line help, or
# 'help.start()' for an HTML browser interface to help.
# Type 'q()' to quit R.
#----------------------------------------------------------
#Sorting Out Folders-----------------------------------------------------------
#
setwd("C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project")
working.dir <- getwd()
#Create folders Names
output.folder.names <- c("tables", "data")
#Loop to creat the folders
for(i in 1:length(output.folder.names))
if(file.exists(output.folder.names[i]) == FALSE) #If the folders are not
#present, create the folder
dir.create(output.folder.names[i])
#Set pathing for the folders.
# path.graphs <- path.figures <- paste(working.dir, "/",
#                                      output.folder.names[1], "/", sep = "")
path.tables <- paste(working.dir, "/", output.folder.names[1], "/",
sep = "")
path.data <- paste(working.dir, "/", output.folder.names[2], "/", sep = "")
#----------------------------------------------------------
#Number of participats in the experiment---------------------------------
#
#How many participants in total in the experiment (equally divided into 4
#groups)
#
total.participants <- 100  #total amount of participants in the experiment
n.participants <- round(total.participants/4, 0)
#how any participants in each group. round it off to 0 s.f.
#Assumption is that I always have equal amount of participants in each group.
#I can't have half a participatns.
#----------------------------------------------------------
#Source Code------------------------------------------------------------------
source("Raw Data.R")
source("Descriptives.R")
source("Data Emulation.R")
source("ANOVA Values.R")
source("Final Table.R")
View(anova2.finish)
View(Sig.Values.f)
View(Sig.Values.m)
View(Sig.Values.s)
f.descr.table
m.descr.table
