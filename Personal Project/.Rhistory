#        s.descr.free.disparaging)
#
# phase2 <- c(m.descr.stress.neutral,
#             m.descr.stress.disparaging)
#
# phase3 <- c(f.descr.stress.neutral,
#             f.descr.stress.disparaging,
#             f.descr.free.neutral,
#             f.descr.free.disparaging)
# i <- 1
#  for(i in 1:4){
#   start.stop <- i
#   descr.table$Size[start.stop[1]:start.stop[1]] <- phase1[i*3 + 1]
#
#   descr.table$Mean[start.stop[1]:start.stop[1]] <- phase1[i*3 + 2]
#
#   descr.table$Standard.Deviation[start.stop[1]:start.stop[1]] <- phase1[i*3 + 3]
#  }
#
#
# i <- 0
# for(i in 0:4){
#   start.stop <- i
#   descr.table$Size[start.stop[i]] <- phase3[i*3 + 1]
#
#   descr.table$Mean[start.stop[i]] <- phase3[i*3 + 2]
#
#   descr.table$Standard.Deviation[start.stop[i]] <- phase3[i*3 + 3]
# }
# start.stop <- c( ((i-1) * n.participants + 1), i * n.participants)
#Storing the data into the 1st columns
storage$start[start.stop[1]:start.stop[2]] <- stress.start
#Manual Labor on assigning the Phase Start values-----------------------------
#Size
# s.descr.table[1,2] = s.descr.stress.neutral[1,1]
# s.descr.table[2,2] = s.descr.stress.disparaging[1,1]
# s.descr.table[3,2] = s.descr.free.disparaging[1,1]
# s.descr.table[4,2] = s.descr.free.disparaging[1,1]
# #Mean
# s.descr.table[1,3] = s.descr.stress.neutral[1,2]
# s.descr.table[2,3] = s.descr.stress.disparaging[1,2]
# s.descr.table[3,3] = s.descr.free.disparaging[1,2]
# s.descr.table[4,3] = s.descr.free.disparaging[1,2]
#
# #SD
# s.descr.table[1,4] = s.descr.stress.neutral[1,3]
# s.descr.table[2,4] = s.descr.stress.disparaging[1,3]
# s.descr.table[3,4] = s.descr.free.disparaging[1,3]
# s.descr.table[4,4] = s.descr.free.disparaging[1,3]
#Looping the descriptive process--------------------------------------------
#
#Phase 1 has all of the groups (size, mean and sd are all equal to each other)
phase1 <-rbind(s.descr.stress.neutral,
s.descr.stress.disparaging,
s.descr.free.neutral,
s.descr.free.disparaging)
#Phase 2 is only applicable to stress groups. So only 2 groups would apply here
phase2 <- rbind(m.descr.stress.neutral,
m.descr.stress.disparaging)
#Last phase involves all of the groups (mean and sd are different in
#every group)
phase3 <- rbind(f.descr.stress.neutral,
f.descr.stress.disparaging,
f.descr.free.neutral,
f.descr.free.disparaging)
for(i in 1:3){
s.descr.table[1:4, i+1] = phase1[1:4, i] #Start
m.descr.table[1:2, i+1] = phase2[1:2, i] #Middle
f.descr.table[1:4, i+1] = phase3[1:4, i] #Final
}
#check if they work. Their values should match
head(phase2)
head(m.descr.table) #It works
#Data Emulation------------------
d.storage <- cbind.data.frame(group = rep(names.groups, rep(n.participants,4)),
start = rep(NA, 4*n.participants),
middle = rep(NA, 4*n.participants),
finish = rep(NA, 4*n.participants)
)
#Emulating data through rnorm---------------------------------------------------
for(i in 1:4){
# enter for loop
start.stop <- c( ((i-1) * n.participants + 1), i * n.participants)
# First phase for every group has all the similar data.
d.storage$start[start.stop[1]:start.stop[2]] <- round(rnorm(n.participants,
s.descr.table$Mean[i],
s.descr.table$Standard.Deviation[i]),2)
#Secobd phase only for the stressed groups
while(i <= 2) {
d.storage$middle[start.stop[1]:start.stop[2]] <- round(rnorm(n.participants,
m.descr.table$Mean[i],
m.descr.table$Standard.Deviation[i]),2)
break }
#Third phase is for all, but every group has diffirent values
d.storage$finish[start.stop[1]:start.stop[2]] <- round(rnorm(n.participants,
f.descr.table$Mean[i],
f.descr.table$Standard.Deviation[i]),2)
}
#Running Anova I need to learn how to run ANOVA with 3 variables---------------
testdata<-stack(storage) #stacks data differently.
anova.result <- aov(values ~ ind, data = testdata)
summary(anova.result)
#Separating each group data for the upcoming analysis.-------------------------
#Note: I am using original storage data, as if I am working with raw data.
storage.stress.n = storage[1:25, 2:4] #Stress Neutral
storage.stress.d = storage[26:50, 2:4] #Stress Disparaging
storage.free.n = storage[51:75, c(2,4)] #No stress Neutral. Deleted the middle.
storage.free.d = storage[76:100, c(2,4)] #No stress Disparaging. No middle.
#Calculating ANOVA for each group manually-----------------------------------
#
# #Anova for Stress Neutral
# anova.stress.n<-stack(storage.stress.n) #Stacking Values
# anova.result.sn <- aov(values ~ ind, data = anova.stress.n)
# summary(anova.result.sn)
# #F(2, 72) = 177, p <.05
# #
# #Anova for Stress Disparaging
# anova.stress.d<-stack(storage.stress.d)
# anova.result.sd <- aov(values ~ ind, data = anova.stress.d)
# summary(anova.result.sd)
# #F(2, 72) = 88, p <.05
# #
# anova.free.n<-stack(storage.free.n)
# anova.result.fn <- aov(values ~ ind, data = anova.free.n)
# summary(anova.result.fn)
# #F(1, 48) = 0.225, p <. 0.616
# #
# anova.free.d<-stack(storage.free.d)
# anova.result.fd <- aov(values ~ ind, data = anova.free.d)
# summary(anova.result.fd)
# #F(1, 48) = 0, p <. 1
#Optimising ANOVA process----------------------------------------------------
anova.results <- function(x) {
y <- stack(x) #Stacking the groups
y<-aov(values ~ ind, data = y) #Running anova analysis
summary(y) #Print out the results in a summary form
}
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
#Values match, The function works.
#Stress Disparaging
anova.result.sd <- anova.results(storage.stress.d)
#No Stress Neutral
anova.result.fn <- anova.results(storage.free.n)
#No Stress Disparaging
anova.result.fd <- anova.results(storage.free.d)
#Trying to Figure Out Anova [FAILED]---------------------------------------
#Doesn't work
# a.1 <- lm(storage$start[76-100] ~ storage$finish[76:100])
# a.2 <- lm(storage$finish[1:25] ~ 1)
# what<-anova(a.1)
# aov(d.storage$start[1:25,], d.storage$middle[1:25,], d.storage$finish[1:25,])
#testdata <- stack(storage)
#Giving anova analysis only values from specific groups from stacked data
# anova.result <- aov(values ~ ind, data = testdata[c(1:25, 101:125, 201:225)])
#
# testdata.lm <- lm(storage$start[1:25],
#                   storage$middle[1:25],
#                   storage$finish[1:25])
#Stress Disparaging
anova.result.sd <- anova.results(storage.stress.d)
View(anova.result.sd)
#No Stress Disparaging
anova.result.fd <- anova.results(storage.free.d)
View(anova.result.fd)
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
summary(anova.result.sn)
anova.results <- function(x) {
y <- stack(x) #Stacking the groups
y<-aov(values ~ ind, data = y) #Running anova analysis
summary(y) #Print out the results in a summary form
}
anova.result.sn <- anova.results(storage.stress.n)
storage.stress.n = storage[1:25, 2:4] #Stress Neutral
storage.stress.d = storage[26:50, 2:4] #Stress Disparaging
storage.free.n = storage[51:75, c(2,4)] #No stress Neutral. Deleted the middle.
storage.free.d = storage[76:100, c(2,4)] #No stress Disparaging. No middle.
View(storage.stress.n)
View(storage.stress.d)
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
anova.results <- function(x) {
x <- stack(x) #Stacking the groups
x <-aov(values ~ ind, data = x) #Running anova analysis
summary(x) #Print out the results in a summary form
}
anova.result.sn <- anova.results(storage.stress.n)
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
anova.results <- function(x) {
x <- stack(x) #Stacking the groups
x <-aov(values ~ ind, data = x) #Running anova analysis
break
summary(x) #Print out the results in a summary form
}
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
anova.results <- function(x) {
x <- stack(x) #Stacking the groups
x <-aov(values ~ ind, data = x) #Running anova analysis
summary(x) #Print out the results in a summary form
}
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
anova.results <- function(x) {
y <- stack(x) #Stacking the groups
z <-aov(values ~ ind, data = y) #Running anova analysis
summary(z) #Print out the results in a summary form
}
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
View(anova.result.sn)
View(anova.result.sn[[1]])
anova.stress.n<-stack(storage.stress.n) #Stacking Values
anova.result.sn <- aov(values ~ ind, data = anova.stress.n)
summary(anova.result.sn)
#F(2, 72) = 177, p <.05
View(s.descr.free.disparaging)
#Stress Disparaging
anova.result.sd <- anova.results(storage.stress.d)
#No Stress Neutral
anova.result.fn <- anova.results(storage.free.n)
#No Stress Disparaging
anova.result.fd <- anova.results(storage.free.d)
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
anova.results <- function(x) {
y <- stack(x) #Stacking the groups
y <-aov(values ~ ind, data = y) #Running anova analysis
summary(y) #Print out the results in a summary form
}
#Check if it matches with the manual input. Stress Neutral Group
anova.result.sn <- anova.results(storage.stress.n)
t.test(storage.free.d$start, storage.free.d$finish)
t.test(storage.free.n$start, storage.free.n$finish)
working.dir <- getwd()
getwd()
working.dir
#Sorting Out Folders
setwd("/Desktop/RStudio Files/Personal Project")
#Sorting Out Folders
setwd("/Desktop/RStudio Files/Personal Project")
#Sorting Out Folders
setwd(dir = ("/Desktop/RStudio Files/Personal Project"))
#Sorting Out Folders
setwd("/Desktop/RStudio Files/Personal Project")
working.dir
#Sorting Out Folders
setwd("C:/Users/Kirill (Kvotl)/Desktop/RStudio Files/Personal Project")
#Sorting Out Folders
setwd("C:/Users/Kirill (Kvotl)/Desktop/RStudio Files/Personal Project")
getwd()
output.folder.names <- c("graphs", "tables", "data")
for(i in 1:length(output.folder.names))
if(file.exists(output.folder.names[i]) == FALSE)
dir.create(output.folder.names[i])
path.graphs <- path.figures <- paste(working.dir, "/",
output.folder.names[1], "/", sep = "")
getwd()
#Sorting Out Folders
setwd("C:/Users/Kirill (Kvotl)/Desktop/RStudio Files/Personal Project")
#Sorting Out Folders
setwd()
#Sorting Out Folders
setwd(dir)
setwd("C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project")
working.dir <- getwd()
working.dir
for(i in 1:length(output.folder.names))
if(file.exists(output.folder.names[i]) == FALSE)
dir.create(output.folder.names[i])
path.graphs <- path.figures <- paste(working.dir, "/",
output.folder.names[1], "/", sep = "")
for(i in 1:length(output.folder.names))
if(file.exists(output.folder.names[i]) == FALSE)
dir.create(output.folder.names[i])
path.graphs <- path.figures <- paste(working.dir, "/",
output.folder.names[1], "/", sep = "")
path.tables <- paste(working.dir, "/", output.folder.names[2], "/",
sep = "")
path.data <- paste(working.dir, "/", output.folder.names[3], "/", sep = "")
#Exporting Raw Data
working.dir
write.table(storage,
file = "/RStudio Files/Personal Project/data/RawDataSimulation.csv",
row.names=FALSE sep = ",")
write.table(storage,
file ="/RStudio Files/Personal Project/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file ="Desktop/RStudio Files/Personal Project/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
#Exporting Raw Data
working.dir
write.table(storage,
file ="C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file ="working.dir/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
#Exporting Raw Data
working.dir
write.table(storage,
file = working.dir"/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = working.dir, "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = working.dir, "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
working.dir
write.table(storage,
file = working.dir, "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = working.dir,
row.names=FALSE, sep = ",")
write.table(storage,
file = working.dir,
row.names=FALSE, sep = ",")
#Exporting Raw Data
working.dir
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project","/data/RawDataSimulation.csv"
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project""/data/RawDataSimulation.csv"
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project""/data/RawDataSimulation.csv"
row.names=FALSE sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project""/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project"$"/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project"~"/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project"+"/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project"%in%"/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = "C:/Users/Kirill (Kvolt)/Desktop/RStudio Files/Personal Project","/", "data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = working.dir, "/", "data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
#Exporting Raw Data
working.dir
write.table(storage,
file = working.dir/data/RawDataSimulation.csv,
row.names=FALSE, sep = ",")
write.table(storage,
file = "working.dir/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = "working.dir/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
write.table(storage,
file = c(working.dir, /data/RawDataSimulation.csv),
row.names=FALSE, sep = ",")
write.table(storage,
file = "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
working.dir
write.table(storage,
file = "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
anova.results <- function(x) {
y <- stack(x) #Stacking the groups
y <-aov(values ~ ind, data = y) #Running anova analysis
summary(y) #Print out the results in a summary form
}
anova.result.sn <- anova.results(storage.stress.n)
View(anova.result.sn)
write.table(storage,
file = paste(working.dir, "/", "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
row.names=FALSE, sep = ",")
write.table(storage,
file = paste(working.dir, "/", "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ",")
row.names=FALSE, sep = ",")
write.table(storage,
file = paste(working.dir, "/", "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir, "/", "data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir"/""data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir "/" "data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir "/" "data/RawDataSimulation.csv",
sep = ","))
write.table(storage,
file = paste(working.dir "/" "data/RawDataSimulation.csv",
sep = ","))
write.table(storage,
file = paste(working.dir/"data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir"data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir, "data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir/ "data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir/"data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
getwd()
write.table(storage,
file = paste(working.dir, "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir "/data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste("working.dir/data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir, "data/RawDataSimulation.csv",
row.names=FALSE, sep = ","))
write.table(storage,
file = paste(working.dir, "data/RawDataSimulation.csv", sep = "")
row.names=FALSE, sep = ",")
write.table(storage,
file = paste(working.dir, "data/RawDataSimulation.csv", sep = ""),
row.names=FALSE, sep = ",")
write.table(storage,
file = paste(working.dir, "data/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#check if they work. Their values should match
head(phase2)
head(m.descr.table) #It works
#Exporting Descriptives
write.table(s.descr.table,
file = paste(working.dir, "table/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
write.table(s.descr.table,
file = paste(working.dir, "table/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Exporting Descriptives
write.table(s.descr.table,
file = paste(working.dir, "tables/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after reading jokes
write.table(f.descr.table,
file = paste(working.dir, "tables/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives at the start of the experiment
write.table(s.descr.table,
file = paste(working.dir, "tables/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after TSST (only stress groups)
write.table(s.descr.table,
file = paste(working.dir, "tables/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after reading jokes
write.table(f.descr.table,
file = paste(working.dir, "tables/RawDataSimulation.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives at the start of the experiment
write.table(s.descr.table,
file = paste(working.dir, "tables/Before.Exp.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after TSST (only stress groups)
write.table(s.descr.table,
file = paste(working.dir, "tables/TSST.levels.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after reading jokes
write.table(f.descr.table,
file = paste(working.dir, "tables/Jokes.levels.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after TSST (only stress groups)
write.table(m.descr.table,
file = paste(working.dir, "tables/TSST.levels.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives at the start of the experiment
write.table(s.descr.table,
file = paste(working.dir, "tables/Before.Exp.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after TSST (only stress groups)
write.table(m.descr.table,
file = paste(working.dir, "tables/TSST.levels.csv", sep = "/"),
row.names=FALSE, sep = ",")
#Descriptives after reading jokes
write.table(f.descr.table,
file = paste(working.dir, "tables/Jokes.levels.csv", sep = "/"),
row.names=FALSE, sep = ",")
#----------------------------------------------------------
#Number of participats in the experiment---------------------------------
#
#How many participants in total in the experiment (equally divided into 4
#groups)
#
total.participants <- 100  #total amount of participants in the experiment
